 #include <stdio.h>
#include <stdbool.h>
#define V 5 
int graph[V][V];
int path[V]; 
bool visited[V]; 
void printHamiltonianCircuit(int length) {
    printf("Hamiltonian Circuit: ");
    for (int i = 0; i < length; i++) {
    printf("%d ", path[i]);
    }
    printf("%d\n", path[0]);
}
bool isSafe(int v, int pos) {
    if (!visited[v] && graph[path[pos - 1]][v]) {
    for (int i = 0; i < pos; i++) {
    if (path[i] == v) {
    return false; 
    }
    }
    return true;
    }
    return false;
}
bool hamiltonianCircuitUtil(int pos, int length) {
    if (pos == V) {
    if (graph[path[pos - 1]][path[0]]) {
    printHamiltonianCircuit(length);
    return true;
    }
    return false;
    }
    for (int v = 1; v < V; v++) {
    if (isSafe(v, pos)) {
    path[pos] = v;
    visited[v] = true;
    if (hamiltonianCircuitUtil(pos + 1, length + 1)) {
    return true;
    }
    path[pos] = -1; 
    visited[v] = false;
    }
    }
    return false;
}
bool findHamiltonianCircuit() {
    for (int i = 0; i < V; i++) {
    visited[i] = false;
    path[i] = -1;
    }
    path[0] = 0;
    visited[0] = true;
    if (!hamiltonianCircuitUtil(1, 1)) {
    printf("No Hamiltonian Circuit exists.\n");
    return false;
    }
    return true;
}
int main() {
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < V; i++) {
    for (int j = 0; j < V; j++) {
    scanf("%d", &graph[i][j]);
    }
    }
    if (findHamiltonianCircuit()) {
    printf("A Hamiltonian Circuit exists.\n");
    }
    return 0;
}

